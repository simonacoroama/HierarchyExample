{"ast":null,"code":"var _jsxFileName = \"C:\\\\Hierarchy\\\\HierarchyExample\\\\HirarchyReact\\\\hierarch\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tree from 'react-d3-tree';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OrgChartTree() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(`http://localhost:5198/Hierarchy`).then(response => {\n      response.json();\n      console.log(response);\n    }).then(actualData => {\n      setProducts(actualData);\n      setLoading(false);\n    });\n  }, []);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      style: {\n        width: '500em',\n        height: '200em'\n      },\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: test,\n        orientation: \"vertical\",\n        initialDepth: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this) // <div>{JSON.stringify(products)}</div>\n\n  );\n}\n\n_s(OrgChartTree, \"KWid68LpBxbFhyja5dauhUIHvyY=\");\n\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"names":["React","Tree","useState","useEffect","OrgChartTree","products","setProducts","loading","setLoading","fetch","then","response","json","console","log","actualData","width","height","test"],"sources":["C:/Hierarchy/HierarchyExample/HirarchyReact/hierarch/src/Tree.js"],"sourcesContent":["import React from 'react';\r\nimport Tree from 'react-d3-tree';\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function OrgChartTree() {\r\n    const [products, setProducts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5198/Hierarchy`)\r\n        .then((response) => {\r\n          response.json();\r\n        console.log(response);})\r\n        .then((actualData) => {\r\n            setProducts(actualData);\r\n            setLoading(false);\r\n    })\r\n       }, []);\r\n\r\n    return (\r\n      // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n      <div id=\"treeWrapper\" style={{ width: '500em', height: '200em' }}>\r\n        <Tree data={test} orientation=\"vertical\" initialDepth={1}/>\r\n      </div>\r\n      // <div>{JSON.stringify(products)}</div>\r\n    );\r\n  }"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,eAAe,SAASC,YAAT,GAAwB;EAAA;;EACnC,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;EACAC,SAAS,CAAC,MAAM;IACZM,KAAK,CAAE,iCAAF,CAAL,CACCC,IADD,CACOC,QAAD,IAAc;MAClBA,QAAQ,CAACC,IAAT;MACFC,OAAO,CAACC,GAAR,CAAYH,QAAZ;IAAuB,CAHvB,EAICD,IAJD,CAIOK,UAAD,IAAgB;MAClBT,WAAW,CAACS,UAAD,CAAX;MACAP,UAAU,CAAC,KAAD,CAAV;IACP,CAPG;EAQA,CATK,EASH,EATG,CAAT;EAWA;IAAA;IACE;IACA;MAAK,EAAE,EAAC,aAAR;MAAsB,KAAK,EAAE;QAAEQ,KAAK,EAAE,OAAT;QAAkBC,MAAM,EAAE;MAA1B,CAA7B;MAAA,uBACE,QAAC,IAAD;QAAM,IAAI,EAAEC,IAAZ;QAAkB,WAAW,EAAC,UAA9B;QAAyC,YAAY,EAAE;MAAvD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAFF,CAKE;;EALF;AAOD;;GArBqBd,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}