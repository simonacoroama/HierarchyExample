{"ast":null,"code":"import treemapDice from \"./dice.js\";\nimport treemapSlice from \"./slice.js\";\nexport var phi = (1 + Math.sqrt(5)) / 2;\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx,\n      dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.\n\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n\n      minRatio = newRatio;\n    } // Position and record the row orientation.\n\n\n    rows.push(row = {\n      value: sumValue,\n      dice: dx < dy,\n      children: nodes.slice(i0, i1)\n    });\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\nexport default (function custom(ratio) {\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function (x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);","map":{"version":3,"names":["treemapDice","treemapSlice","phi","Math","sqrt","squarifyRatio","ratio","parent","x0","y0","x1","y1","rows","nodes","children","row","nodeValue","i0","i1","n","length","dx","dy","value","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","max","push","dice","slice","custom","squarify","x"],"sources":["C:/tasks/extra/HierarchyExample/HirarchyReact/hierarch/node_modules/d3-hierarchy/src/treemap/squarify.js"],"sourcesContent":["import treemapDice from \"./dice.js\";\r\nimport treemapSlice from \"./slice.js\";\r\n\r\nexport var phi = (1 + Math.sqrt(5)) / 2;\r\n\r\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\r\n  var rows = [],\r\n      nodes = parent.children,\r\n      row,\r\n      nodeValue,\r\n      i0 = 0,\r\n      i1 = 0,\r\n      n = nodes.length,\r\n      dx, dy,\r\n      value = parent.value,\r\n      sumValue,\r\n      minValue,\r\n      maxValue,\r\n      newRatio,\r\n      minRatio,\r\n      alpha,\r\n      beta;\r\n\r\n  while (i0 < n) {\r\n    dx = x1 - x0, dy = y1 - y0;\r\n\r\n    // Find the next non-empty node.\r\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\r\n    minValue = maxValue = sumValue;\r\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n    beta = sumValue * sumValue * alpha;\r\n    minRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n    // Keep adding nodes while the aspect ratio maintains or improves.\r\n    for (; i1 < n; ++i1) {\r\n      sumValue += nodeValue = nodes[i1].value;\r\n      if (nodeValue < minValue) minValue = nodeValue;\r\n      if (nodeValue > maxValue) maxValue = nodeValue;\r\n      beta = sumValue * sumValue * alpha;\r\n      newRatio = Math.max(maxValue / beta, beta / minValue);\r\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\r\n      minRatio = newRatio;\r\n    }\r\n\r\n    // Position and record the row orientation.\r\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\r\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\r\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\r\n    value -= sumValue, i0 = i1;\r\n  }\r\n\r\n  return rows;\r\n}\r\n\r\nexport default (function custom(ratio) {\r\n\r\n  function squarify(parent, x0, y0, x1, y1) {\r\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\r\n  }\r\n\r\n  squarify.ratio = function(x) {\r\n    return custom((x = +x) > 1 ? x : 1);\r\n  };\r\n\r\n  return squarify;\r\n})(phi);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}