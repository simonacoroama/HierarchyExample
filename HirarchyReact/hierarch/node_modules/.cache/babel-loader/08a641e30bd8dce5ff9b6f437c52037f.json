{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.getChildMapping = getChildMapping;\nexports.mergeChildMappings = mergeChildMappings;\n\nvar _react = require('react');\n/**\r\n * Given `this.props.children`, return an object mapping key to child.\r\n *\r\n * @param {*} children `this.props.children`\r\n * @return {object} Mapping of key to child\r\n */\n\n\nfunction getChildMapping(children) {\n  if (!children) {\n    return children;\n  }\n\n  var result = {};\n\n  _react.Children.map(children, function (child) {\n    return child;\n  }).forEach(function (child) {\n    result[child.key] = child;\n  });\n\n  return result;\n}\n/**\r\n * When you're adding or removing children some may be added or removed in the\r\n * same render pass. We want to show *both* since we want to simultaneously\r\n * animate elements in and out. This function takes a previous set of keys\r\n * and a new set of keys and merges them with its best guess of the correct\r\n * ordering. In the future we may expose some of the utilities in\r\n * ReactMultiChild to make this easy, but for now React itself does not\r\n * directly have this concept of the union of prevChildren and nextChildren\r\n * so we implement it here.\r\n *\r\n * @param {object} prev prev children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @param {object} next next children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @return {object} a key set that contains all keys in `prev` and all keys\r\n * in `next` in a reasonable order.\r\n */\n\n\nfunction mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    if (next.hasOwnProperty(key)) {\n      return next[key];\n    }\n\n    return prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = {};\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (next.hasOwnProperty(prevKey)) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i = void 0;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending.hasOwnProperty(nextKey)) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}","map":{"version":3,"names":["exports","__esModule","getChildMapping","mergeChildMappings","_react","require","children","result","Children","map","child","forEach","key","prev","next","getValueForKey","hasOwnProperty","nextKeysPending","pendingKeys","prevKey","length","push","i","childMapping","nextKey","pendingNextKey"],"sources":["C:/tasks/extra/HierarchyExample/HirarchyReact/hierarch/node_modules/@bkrem/react-transition-group/utils/ChildMapping.js"],"sourcesContent":["'use strict';\r\n\r\nexports.__esModule = true;\r\nexports.getChildMapping = getChildMapping;\r\nexports.mergeChildMappings = mergeChildMappings;\r\n\r\nvar _react = require('react');\r\n\r\n/**\r\n * Given `this.props.children`, return an object mapping key to child.\r\n *\r\n * @param {*} children `this.props.children`\r\n * @return {object} Mapping of key to child\r\n */\r\nfunction getChildMapping(children) {\r\n  if (!children) {\r\n    return children;\r\n  }\r\n  var result = {};\r\n  _react.Children.map(children, function (child) {\r\n    return child;\r\n  }).forEach(function (child) {\r\n    result[child.key] = child;\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * When you're adding or removing children some may be added or removed in the\r\n * same render pass. We want to show *both* since we want to simultaneously\r\n * animate elements in and out. This function takes a previous set of keys\r\n * and a new set of keys and merges them with its best guess of the correct\r\n * ordering. In the future we may expose some of the utilities in\r\n * ReactMultiChild to make this easy, but for now React itself does not\r\n * directly have this concept of the union of prevChildren and nextChildren\r\n * so we implement it here.\r\n *\r\n * @param {object} prev prev children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @param {object} next next children as returned from\r\n * `ReactTransitionChildMapping.getChildMapping()`.\r\n * @return {object} a key set that contains all keys in `prev` and all keys\r\n * in `next` in a reasonable order.\r\n */\r\nfunction mergeChildMappings(prev, next) {\r\n  prev = prev || {};\r\n  next = next || {};\r\n\r\n  function getValueForKey(key) {\r\n    if (next.hasOwnProperty(key)) {\r\n      return next[key];\r\n    }\r\n\r\n    return prev[key];\r\n  }\r\n\r\n  // For each key of `next`, the list of keys to insert before that key in\r\n  // the combined list\r\n  var nextKeysPending = {};\r\n\r\n  var pendingKeys = [];\r\n  for (var prevKey in prev) {\r\n    if (next.hasOwnProperty(prevKey)) {\r\n      if (pendingKeys.length) {\r\n        nextKeysPending[prevKey] = pendingKeys;\r\n        pendingKeys = [];\r\n      }\r\n    } else {\r\n      pendingKeys.push(prevKey);\r\n    }\r\n  }\r\n\r\n  var i = void 0;\r\n  var childMapping = {};\r\n  for (var nextKey in next) {\r\n    if (nextKeysPending.hasOwnProperty(nextKey)) {\r\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\r\n        var pendingNextKey = nextKeysPending[nextKey][i];\r\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\r\n      }\r\n    }\r\n    childMapping[nextKey] = getValueForKey(nextKey);\r\n  }\r\n\r\n  // Finally, add the keys which didn't appear before any key in `next`\r\n  for (i = 0; i < pendingKeys.length; i++) {\r\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\r\n  }\r\n\r\n  return childMapping;\r\n}"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,kBAAR,GAA6BA,kBAA7B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,eAAT,CAAyBI,QAAzB,EAAmC;EACjC,IAAI,CAACA,QAAL,EAAe;IACb,OAAOA,QAAP;EACD;;EACD,IAAIC,MAAM,GAAG,EAAb;;EACAH,MAAM,CAACI,QAAP,CAAgBC,GAAhB,CAAoBH,QAApB,EAA8B,UAAUI,KAAV,EAAiB;IAC7C,OAAOA,KAAP;EACD,CAFD,EAEGC,OAFH,CAEW,UAAUD,KAAV,EAAiB;IAC1BH,MAAM,CAACG,KAAK,CAACE,GAAP,CAAN,GAAoBF,KAApB;EACD,CAJD;;EAKA,OAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASJ,kBAAT,CAA4BU,IAA5B,EAAkCC,IAAlC,EAAwC;EACtCD,IAAI,GAAGA,IAAI,IAAI,EAAf;EACAC,IAAI,GAAGA,IAAI,IAAI,EAAf;;EAEA,SAASC,cAAT,CAAwBH,GAAxB,EAA6B;IAC3B,IAAIE,IAAI,CAACE,cAAL,CAAoBJ,GAApB,CAAJ,EAA8B;MAC5B,OAAOE,IAAI,CAACF,GAAD,CAAX;IACD;;IAED,OAAOC,IAAI,CAACD,GAAD,CAAX;EACD,CAVqC,CAYtC;EACA;;;EACA,IAAIK,eAAe,GAAG,EAAtB;EAEA,IAAIC,WAAW,GAAG,EAAlB;;EACA,KAAK,IAAIC,OAAT,IAAoBN,IAApB,EAA0B;IACxB,IAAIC,IAAI,CAACE,cAAL,CAAoBG,OAApB,CAAJ,EAAkC;MAChC,IAAID,WAAW,CAACE,MAAhB,EAAwB;QACtBH,eAAe,CAACE,OAAD,CAAf,GAA2BD,WAA3B;QACAA,WAAW,GAAG,EAAd;MACD;IACF,CALD,MAKO;MACLA,WAAW,CAACG,IAAZ,CAAiBF,OAAjB;IACD;EACF;;EAED,IAAIG,CAAC,GAAG,KAAK,CAAb;EACA,IAAIC,YAAY,GAAG,EAAnB;;EACA,KAAK,IAAIC,OAAT,IAAoBV,IAApB,EAA0B;IACxB,IAAIG,eAAe,CAACD,cAAhB,CAA+BQ,OAA/B,CAAJ,EAA6C;MAC3C,KAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,eAAe,CAACO,OAAD,CAAf,CAAyBJ,MAAzC,EAAiDE,CAAC,EAAlD,EAAsD;QACpD,IAAIG,cAAc,GAAGR,eAAe,CAACO,OAAD,CAAf,CAAyBF,CAAzB,CAArB;QACAC,YAAY,CAACN,eAAe,CAACO,OAAD,CAAf,CAAyBF,CAAzB,CAAD,CAAZ,GAA4CP,cAAc,CAACU,cAAD,CAA1D;MACD;IACF;;IACDF,YAAY,CAACC,OAAD,CAAZ,GAAwBT,cAAc,CAACS,OAAD,CAAtC;EACD,CAtCqC,CAwCtC;;;EACA,KAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,WAAW,CAACE,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;IACvCC,YAAY,CAACL,WAAW,CAACI,CAAD,CAAZ,CAAZ,GAA+BP,cAAc,CAACG,WAAW,CAACI,CAAD,CAAZ,CAA7C;EACD;;EAED,OAAOC,YAAP;AACD"},"metadata":{},"sourceType":"script"}