{"ast":null,"code":"var _jsxFileName = \"C:\\\\Hierarchy\\\\HierarchyExample\\\\HirarchyReact\\\\hierarch\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tree from 'react-d3-tree';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OrgChartTree() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  useEffect(() => {\n    fetch(`http://localhost:5198/Hierarchy`).then(response => response.json()).then(actualData => {\n      setProducts(actualData);\n    });\n  }, []);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(\"div\", {\n      id: \"treeWrapper\",\n      style: {\n        width: '500em',\n        height: '200em'\n      },\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: products,\n        orientation: \"vertical\",\n        initialDepth: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  );\n}\n\n_s(OrgChartTree, \"f86L6rLANGURv6GE6gupp7+oOp4=\");\n\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"names":["React","Tree","useState","useEffect","OrgChartTree","products","setProducts","fetch","then","response","json","actualData","width","height"],"sources":["C:/Hierarchy/HierarchyExample/HirarchyReact/hierarch/src/Tree.js"],"sourcesContent":["import React from 'react';\r\nimport Tree from 'react-d3-tree';\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function OrgChartTree() {\r\n    const [products, setProducts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5198/Hierarchy`)\r\n        .then((response) => response.json())\r\n        .then((actualData) => {\r\n            setProducts(actualData)\r\n    })\r\n       }, []);\r\n\r\n    return (\r\n      // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n      <div id=\"treeWrapper\" style={{ width: '500em', height: '200em' }}>\r\n        <Tree data={products} orientation=\"vertical\" initialDepth={1}/>\r\n      </div>\r\n    );\r\n  }"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,eAAe,SAASC,YAAT,GAAwB;EAAA;;EACnC,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;EAEAC,SAAS,CAAC,MAAM;IACZI,KAAK,CAAE,iCAAF,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEOG,UAAD,IAAgB;MAClBL,WAAW,CAACK,UAAD,CAAX;IACP,CAJG;EAKA,CANK,EAMH,EANG,CAAT;EAQA;IAAA;IACE;IACA;MAAK,EAAE,EAAC,aAAR;MAAsB,KAAK,EAAE;QAAEC,KAAK,EAAE,OAAT;QAAkBC,MAAM,EAAE;MAA1B,CAA7B;MAAA,uBACE,QAAC,IAAD;QAAM,IAAI,EAAER,QAAZ;QAAsB,WAAW,EAAC,UAAlC;QAA6C,YAAY,EAAE;MAA3D;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EAFF;AAMD;;GAjBqBD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}