{"ast":null,"code":"var _jsxFileName = \"C:\\\\Hierarchy\\\\HierarchyExample\\\\HirarchyReact\\\\hierarch\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tree from 'react-d3-tree';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OrgChartTree() {\n  _s();\n\n  const [products, setProducts] = useState();\n  useEffect(products => {\n    fetch(`http://localhost:5198/Hierarchy`).then(response => {\n      response.json();\n      console.log(response);\n    }).then(actualData => {\n      setProducts(actualData);\n      console.log(actualData);\n    });\n  }, []);\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    // <div id=\"treeWrapper\" style={{ width: '500em', height: '200em' }}>\n    //   <Tree data={products} orientation=\"vertical\" initialDepth={1}/>\n    // </div>\n    _jsxDEV(\"div\", {\n      children: JSON.stringify(products)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  );\n}\n\n_s(OrgChartTree, \"WsG59hGLZBv0fpRHcsgwGiAQpQg=\");\n\n_c = OrgChartTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrgChartTree\");","map":{"version":3,"names":["React","Tree","useState","useEffect","OrgChartTree","products","setProducts","fetch","then","response","json","console","log","actualData","JSON","stringify"],"sources":["C:/Hierarchy/HierarchyExample/HirarchyReact/hierarch/src/Tree.js"],"sourcesContent":["import React from 'react';\r\nimport Tree from 'react-d3-tree';\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport default function OrgChartTree() {\r\n    const [products, setProducts] = useState();\r\n\r\n    useEffect((products) => {\r\n        fetch(`http://localhost:5198/Hierarchy`)\r\n        .then((response) => {\r\n          response.json();\r\n        console.log(response);})\r\n        .then((actualData) => {\r\n            setProducts(actualData);\r\n            console.log(actualData);\r\n    })\r\n       }, []);\r\n\r\n    return (\r\n      // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\r\n      // <div id=\"treeWrapper\" style={{ width: '500em', height: '200em' }}>\r\n      //   <Tree data={products} orientation=\"vertical\" initialDepth={1}/>\r\n      // </div>\r\n      <div>{JSON.stringify(products)}</div>\r\n    );\r\n  }"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,eAAe,SAASC,YAAT,GAAwB;EAAA;;EACnC,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,EAAxC;EAEAC,SAAS,CAAEE,QAAD,IAAc;IACpBE,KAAK,CAAE,iCAAF,CAAL,CACCC,IADD,CACOC,QAAD,IAAc;MAClBA,QAAQ,CAACC,IAAT;MACFC,OAAO,CAACC,GAAR,CAAYH,QAAZ;IAAuB,CAHvB,EAICD,IAJD,CAIOK,UAAD,IAAgB;MAClBP,WAAW,CAACO,UAAD,CAAX;MACAF,OAAO,CAACC,GAAR,CAAYC,UAAZ;IACP,CAPG;EAQA,CATK,EASH,EATG,CAAT;EAWA;IAAA;IACE;IACA;IACA;IACA;IACA;MAAA,UAAMC,IAAI,CAACC,SAAL,CAAeV,QAAf;IAAN;MAAA;MAAA;MAAA;IAAA;EALF;AAOD;;GArBqBD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}